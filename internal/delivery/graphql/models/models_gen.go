// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package models

import (
	"fmt"
	"io"
	"strconv"
)

type Lecturer struct {
	ID        string `json:"id"`
	Firstname string `json:"firstname"`
	Lastname  string `json:"lastname"`
	Year      int    `json:"year"`
}

type LecturerDeleteResponse struct {
	Status  string  `json:"status"`
	ID      *string `json:"ID,omitempty"`
	Message string  `json:"message"`
}

type LecturerInput struct {
	ID        *string `json:"id,omitempty"`
	Firstname *string `json:"firstname,omitempty"`
	Lastname  *string `json:"lastname,omitempty"`
	Year      *int    `json:"year,omitempty"`
}

type LecturerListResponse struct {
	Status  string      `json:"status"`
	Data    []*Lecturer `json:"data"`
	Message string      `json:"message"`
}

type LecturerResponse struct {
	Status  string    `json:"status"`
	Data    *Lecturer `json:"data,omitempty"`
	Message string    `json:"message"`
}

type LecturerSearch struct {
	TotalElements int         `json:"totalElements"`
	Data          []*Lecturer `json:"data"`
}

type LecturerSearchResponse struct {
	Status  string          `json:"status"`
	Data    *LecturerSearch `json:"data,omitempty"`
	Message string          `json:"message"`
}

type Pagination struct {
	Page     *int `json:"page,omitempty"`
	PageSize *int `json:"pageSize,omitempty"`
}

type SortBy struct {
	Column    *string    `json:"column,omitempty"`
	Direction *Direction `json:"direction,omitempty"`
}

type Student struct {
	ID        string `json:"id"`
	Firstname string `json:"firstname"`
	Lastname  string `json:"lastname"`
	Year      int    `json:"year"`
}

type StudentDeleteResponse struct {
	Status  string  `json:"status"`
	ID      *string `json:"ID,omitempty"`
	Message string  `json:"message"`
}

type StudentInput struct {
	ID        *string `json:"id,omitempty"`
	Firstname *string `json:"firstname,omitempty"`
	Lastname  *string `json:"lastname,omitempty"`
	Year      *int    `json:"year,omitempty"`
}

type StudentListResponse struct {
	Status  string     `json:"status"`
	Data    []*Student `json:"data"`
	Message string     `json:"message"`
}

type StudentResponse struct {
	Status  string   `json:"status"`
	Data    *Student `json:"data,omitempty"`
	Message string   `json:"message"`
}

type StudentSearch struct {
	TotalElements int        `json:"totalElements"`
	Data          []*Student `json:"data"`
}

type StudentSearchResponse struct {
	Status  string         `json:"status"`
	Data    *StudentSearch `json:"data,omitempty"`
	Message string         `json:"message"`
}

type Test struct {
	Test *string `json:"test,omitempty"`
}

type Direction string

const (
	DirectionAsc  Direction = "ASC"
	DirectionDesc Direction = "DESC"
)

var AllDirection = []Direction{
	DirectionAsc,
	DirectionDesc,
}

func (e Direction) IsValid() bool {
	switch e {
	case DirectionAsc, DirectionDesc:
		return true
	}
	return false
}

func (e Direction) String() string {
	return string(e)
}

func (e *Direction) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Direction(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Direction", str)
	}
	return nil
}

func (e Direction) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
