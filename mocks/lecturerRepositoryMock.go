// Code generated by MockGen. DO NOT EDIT.
// Source: ../src/github.com/shashaneRanasinghe/simpleMongoAPI/internal/repository/lecturerRepository.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	models "github.com/shashaneRanasinghe/simpleMongoAPI/internal/models"
	primitive "go.mongodb.org/mongo-driver/bson/primitive"
)

// MockLecturerRepository is a mock of LecturerRepository interface.
type MockLecturerRepository struct {
	ctrl     *gomock.Controller
	recorder *MockLecturerRepositoryMockRecorder
}

// MockLecturerRepositoryMockRecorder is the mock recorder for MockLecturerRepository.
type MockLecturerRepositoryMockRecorder struct {
	mock *MockLecturerRepository
}

// NewMockLecturerRepository creates a new mock instance.
func NewMockLecturerRepository(ctrl *gomock.Controller) *MockLecturerRepository {
	mock := &MockLecturerRepository{ctrl: ctrl}
	mock.recorder = &MockLecturerRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLecturerRepository) EXPECT() *MockLecturerRepositoryMockRecorder {
	return m.recorder
}

// CreateLecturer mocks base method.
func (m *MockLecturerRepository) CreateLecturer(ctx context.Context, lecturer *models.Lecturer) (*models.Lecturer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateLecturer", ctx, lecturer)
	ret0, _ := ret[0].(*models.Lecturer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateLecturer indicates an expected call of CreateLecturer.
func (mr *MockLecturerRepositoryMockRecorder) CreateLecturer(ctx, lecturer interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateLecturer", reflect.TypeOf((*MockLecturerRepository)(nil).CreateLecturer), ctx, lecturer)
}

// DeleteLecturer mocks base method.
func (m *MockLecturerRepository) DeleteLecturer(ctx context.Context, id primitive.ObjectID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteLecturer", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteLecturer indicates an expected call of DeleteLecturer.
func (mr *MockLecturerRepositoryMockRecorder) DeleteLecturer(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteLecturer", reflect.TypeOf((*MockLecturerRepository)(nil).DeleteLecturer), ctx, id)
}

// FindAllLecturers mocks base method.
func (m *MockLecturerRepository) FindAllLecturers(ctx context.Context) ([]models.Lecturer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAllLecturers", ctx)
	ret0, _ := ret[0].([]models.Lecturer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAllLecturers indicates an expected call of FindAllLecturers.
func (mr *MockLecturerRepositoryMockRecorder) FindAllLecturers(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAllLecturers", reflect.TypeOf((*MockLecturerRepository)(nil).FindAllLecturers), ctx)
}

// FindLecturer mocks base method.
func (m *MockLecturerRepository) FindLecturer(ctx context.Context, id primitive.ObjectID) (*models.Lecturer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindLecturer", ctx, id)
	ret0, _ := ret[0].(*models.Lecturer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindLecturer indicates an expected call of FindLecturer.
func (mr *MockLecturerRepositoryMockRecorder) FindLecturer(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindLecturer", reflect.TypeOf((*MockLecturerRepository)(nil).FindLecturer), ctx, id)
}

// SearchLecturer mocks base method.
func (m *MockLecturerRepository) SearchLecturer(ctx context.Context, searchString string, pagination models.Pagination, sortBy models.SortBy) (*models.LecturerSearchData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchLecturer", ctx, searchString, pagination, sortBy)
	ret0, _ := ret[0].(*models.LecturerSearchData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchLecturer indicates an expected call of SearchLecturer.
func (mr *MockLecturerRepositoryMockRecorder) SearchLecturer(ctx, searchString, pagination, sortBy interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchLecturer", reflect.TypeOf((*MockLecturerRepository)(nil).SearchLecturer), ctx, searchString, pagination, sortBy)
}

// UpdateLecturer mocks base method.
func (m *MockLecturerRepository) UpdateLecturer(ctx context.Context, lecturer *models.Lecturer) (*models.Lecturer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateLecturer", ctx, lecturer)
	ret0, _ := ret[0].(*models.Lecturer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateLecturer indicates an expected call of UpdateLecturer.
func (mr *MockLecturerRepositoryMockRecorder) UpdateLecturer(ctx, lecturer interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateLecturer", reflect.TypeOf((*MockLecturerRepository)(nil).UpdateLecturer), ctx, lecturer)
}
