// Code generated by MockGen. DO NOT EDIT.
// Source: ../src/github.com/shashaneRanasinghe/simpleMongoAPI/internal/usecases/lecturer/lecturerUsecase.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	models "github.com/shashaneRanasinghe/simpleMongoAPI/internal/models"
	primitive "go.mongodb.org/mongo-driver/bson/primitive"
)

// MockLecturerUsecase is a mock of LecturerUsecase interface.
type MockLecturerUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockLecturerUsecaseMockRecorder
}

// MockLecturerUsecaseMockRecorder is the mock recorder for MockLecturerUsecase.
type MockLecturerUsecaseMockRecorder struct {
	mock *MockLecturerUsecase
}

// NewMockLecturerUsecase creates a new mock instance.
func NewMockLecturerUsecase(ctrl *gomock.Controller) *MockLecturerUsecase {
	mock := &MockLecturerUsecase{ctrl: ctrl}
	mock.recorder = &MockLecturerUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLecturerUsecase) EXPECT() *MockLecturerUsecaseMockRecorder {
	return m.recorder
}

// CreateLecturer mocks base method.
func (m *MockLecturerUsecase) CreateLecturer(ctx context.Context, lecturer *models.Lecturer) (*models.Lecturer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateLecturer", ctx, lecturer)
	ret0, _ := ret[0].(*models.Lecturer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateLecturer indicates an expected call of CreateLecturer.
func (mr *MockLecturerUsecaseMockRecorder) CreateLecturer(ctx, lecturer interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateLecturer", reflect.TypeOf((*MockLecturerUsecase)(nil).CreateLecturer), ctx, lecturer)
}

// DeleteLecturer mocks base method.
func (m *MockLecturerUsecase) DeleteLecturer(ctx context.Context, id primitive.ObjectID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteLecturer", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteLecturer indicates an expected call of DeleteLecturer.
func (mr *MockLecturerUsecaseMockRecorder) DeleteLecturer(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteLecturer", reflect.TypeOf((*MockLecturerUsecase)(nil).DeleteLecturer), ctx, id)
}

// GetAllLecturers mocks base method.
func (m *MockLecturerUsecase) GetAllLecturers(ctx context.Context) ([]models.Lecturer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllLecturers", ctx)
	ret0, _ := ret[0].([]models.Lecturer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllLecturers indicates an expected call of GetAllLecturers.
func (mr *MockLecturerUsecaseMockRecorder) GetAllLecturers(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllLecturers", reflect.TypeOf((*MockLecturerUsecase)(nil).GetAllLecturers), ctx)
}

// GetLecturer mocks base method.
func (m *MockLecturerUsecase) GetLecturer(ctx context.Context, id primitive.ObjectID) (*models.Lecturer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLecturer", ctx, id)
	ret0, _ := ret[0].(*models.Lecturer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLecturer indicates an expected call of GetLecturer.
func (mr *MockLecturerUsecaseMockRecorder) GetLecturer(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLecturer", reflect.TypeOf((*MockLecturerUsecase)(nil).GetLecturer), ctx, id)
}

// SearchLecturer mocks base method.
func (m *MockLecturerUsecase) SearchLecturer(ctx context.Context, searchString string, pagination models.Pagination, sortBy models.SortBy) (*models.LecturerSearchData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchLecturer", ctx, searchString, pagination, sortBy)
	ret0, _ := ret[0].(*models.LecturerSearchData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchLecturer indicates an expected call of SearchLecturer.
func (mr *MockLecturerUsecaseMockRecorder) SearchLecturer(ctx, searchString, pagination, sortBy interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchLecturer", reflect.TypeOf((*MockLecturerUsecase)(nil).SearchLecturer), ctx, searchString, pagination, sortBy)
}

// UpdateLecturer mocks base method.
func (m *MockLecturerUsecase) UpdateLecturer(ctx context.Context, lecturer *models.Lecturer) (*models.Lecturer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateLecturer", ctx, lecturer)
	ret0, _ := ret[0].(*models.Lecturer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateLecturer indicates an expected call of UpdateLecturer.
func (mr *MockLecturerUsecaseMockRecorder) UpdateLecturer(ctx, lecturer interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateLecturer", reflect.TypeOf((*MockLecturerUsecase)(nil).UpdateLecturer), ctx, lecturer)
}
