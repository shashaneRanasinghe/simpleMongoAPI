package resolvers

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.31

import (
	"context"

	"github.com/shashaneRanasinghe/simpleMongoAPI/internal/delivery/graphql/models"
	models2 "github.com/shashaneRanasinghe/simpleMongoAPI/internal/models"
	"github.com/shashaneRanasinghe/simpleMongoAPI/pkg/consts"
	"github.com/tryfix/log"
	"go.mongodb.org/mongo-driver/bson/primitive"
)

// CreateStudent is the resolver for the createStudent field.
func (r *mutationResolver) CreateStudent(ctx context.Context, student *models.StudentInput) (*models.StudentResponse, error) {
	var resp models.StudentResponse

	st := models2.Student{
		FirstName: *student.Firstname,
		LastName:  *student.Lastname,
		Year:      *student.Year,
	}

	stResult, err := r.studentUsecase.CreateStudent(ctx, &st)
	if err != nil {
		log.Error(consts.StudentCreateError, err)
		resp.Status = consts.Error
		resp.Data = nil
		resp.Message = consts.StudentCreateError
		return &resp, nil
	}

	respStudent := models.Student{
		ID:        stResult.ID.Hex(),
		Firstname: stResult.FirstName,
		Lastname:  stResult.LastName,
		Year:      stResult.Year,
	}

	resp.Status = consts.Success
	resp.Data = &respStudent
	resp.Message = consts.StudentCreateSuccess
	return &resp, nil
}

// UpdateStudent is the resolver for the updateStudent field.
func (r *mutationResolver) UpdateStudent(ctx context.Context, student *models.StudentInput) (*models.StudentResponse, error) {
	var resp models.StudentResponse
	id, err := primitive.ObjectIDFromHex(*student.ID)
	if err != nil {
		log.Error(consts.IDError, err)
		resp.Status = consts.Error
		resp.Data = nil
		resp.Message = consts.IDError
		return &resp, nil
	}
	st := models2.Student{
		ID:        id,
		FirstName: *student.Firstname,
		LastName:  *student.Lastname,
		Year:      *student.Year,
	}

	stResult, err := r.studentUsecase.UpdateStudent(ctx, &st)
	if err != nil {
		log.Error(consts.StudentUpdateError, err)
		resp.Status = consts.Error
		resp.Data = nil
		resp.Message = consts.StudentUpdateError
		return &resp, nil
	}

	respStudent := models.Student{
		ID:        stResult.ID.Hex(),
		Firstname: stResult.FirstName,
		Lastname:  stResult.LastName,
		Year:      stResult.Year,
	}

	resp.Status = consts.Success
	resp.Data = &respStudent
	resp.Message = consts.StudentUpdateSuccess
	return &resp, nil
}

// DeleteStudent is the resolver for the deleteStudent field.
func (r *mutationResolver) DeleteStudent(ctx context.Context, studentID string) (*models.StudentDeleteResponse, error) {
	var resp models.StudentDeleteResponse
	id, err := primitive.ObjectIDFromHex(studentID)
	if err != nil {
		log.Error(consts.ObjectIdConvertError, err)
		resp.Status = consts.Error
		resp.Message = consts.ObjectIdConvertError
		return &resp, nil
	}
	err = r.studentUsecase.DeleteStudent(ctx, id)
	if err != nil {
		log.Error(consts.StudentDeleteError, err)
		resp.Status = consts.Error
		resp.Message = consts.StudentDeleteError
		return &resp, nil
	}
	resp.Status = consts.Success
	resp.Message = consts.DeleteStudentSuccess
	return &resp, nil
}

// GetAllStudents is the resolver for the getAllStudents field.
func (r *queryResolver) GetAllStudents(ctx context.Context) (*models.StudentListResponse, error) {
	var resp models.StudentListResponse
	var resStudents []*models.Student

	students, err := r.studentUsecase.GetAllStudents(ctx)
	if err != nil {
		log.Error(consts.StudentGetError, err)
		resp.Status = consts.Error
		resp.Data = nil
		resp.Message = consts.StudentGetError
		return &resp, nil
	}

	for _, st := range students {
		resStudent := models.Student{
			ID:        (st.ID).Hex(),
			Firstname: st.FirstName,
			Lastname:  st.LastName,
			Year:      st.Year,
		}
		resStudents = append(resStudents, &resStudent)
	}

	resp.Status = consts.Success
	resp.Data = resStudents
	resp.Message = consts.StudentGetSuccess
	return &resp, nil
}

// GetStudent is the resolver for the getStudent field.
func (r *queryResolver) GetStudent(ctx context.Context, studentID string) (*models.StudentResponse, error) {
	var resp models.StudentResponse
	id, err := primitive.ObjectIDFromHex(studentID)
	if err != nil {
		log.Error(consts.ObjectIdConvertError, err)
		resp.Status = consts.Error
		resp.Message = consts.ObjectIdConvertError
		return &resp, nil
	}
	reStudent, err := r.studentUsecase.GetStudent(ctx, id)
	if err != nil {
		log.Error(consts.StudentGetError, err)
		resp.Status = consts.Error
		resp.Message = consts.StudentGetError
		return &resp, nil
	}
	st := models.Student{
		ID:        reStudent.ID.Hex(),
		Firstname: reStudent.FirstName,
		Lastname:  reStudent.LastName,
		Year:      reStudent.Year,
	}
	resp.Status = consts.Success
	resp.Data = &st
	resp.Message = consts.StudentGetSuccess
	return &resp, nil
}

// SearchStudent is the resolver for the searchStudent field.
func (r *queryResolver) SearchStudent(ctx context.Context, searchString *string, pagination *models.Pagination, sortBy *models.SortBy) (*models.StudentSearchResponse, error) {
	var resp models.StudentSearchResponse
	var studentSearch models.StudentSearch
	var resStudents []*models.Student

	paginationIn := models2.Pagination{
		Page:     *pagination.Page,
		PageSize: *pagination.PageSize,
	}
	sortByIn := models2.SortBy{
		Column:    *sortBy.Column,
		Direction: string(*sortBy.Direction),
	}

	searchResult, err := r.studentUsecase.SearchStudent(ctx, *searchString, paginationIn, sortByIn)
	if err != nil {
		log.Error(consts.StudentGetError, err)
		resp.Status = consts.Error
		resp.Message = consts.StudentGetError
		return &resp, nil
	}
	for _, st := range searchResult.Data {
		resStudent := models.Student{
			ID:        (st.ID).Hex(),
			Firstname: st.FirstName,
			Lastname:  st.LastName,
			Year:      st.Year,
		}
		resStudents = append(resStudents, &resStudent)
	}

	studentSearch.TotalElements = searchResult.TotalElements
	studentSearch.Data = resStudents

	resp.Status = consts.Success
	resp.Data = &studentSearch
	resp.Message = consts.StudentGetSuccess
	return &resp, nil
}
